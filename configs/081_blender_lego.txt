# Based on 067/071. Adv loss + consistency
# Based on 080 (rand flips, only uses fine net for GAN losses)
# Trains with hyperparams closer to SinGAN
#   - wgangp
#   - 2 discriminators
#   - 1 inner discriminator steps (should be 3 ideally)
#   - 1 inner generator steps (should be 3 ideally)
#   - Lowered min discrim loss
#   - Lowered GAN loss weight
#   - Bilinear pixel interpolation (not sure what SinGAN uses)
#   - Add learning rate decay to the discriminator
expname = 081_blender_lego_ctr_patchganfine_flips
basedir = ./logs
datadir = ./data/nerf_synthetic/lego
dataset_type = blender

no_batching = True

use_viewdirs = True
white_bkgd = True
lrate_decay = 500

N_samples = 64
N_importance = 128
N_rand = 1024
chunk = 32768

precrop_iters = 500
precrop_frac = 0.5

half_res = True

## Computation options relevant for rendering
max_train_views = 8
pixel_interp_mode = bilinear
feature_interp_mode = bilinear
checkpoint_rendering = True
i_log_raw_hist = 2
i_log_ctr_img = 10
i_video = 6250
render_autocast = True

## Shared rendering loss options
render_loss_interval = 10
render_nH = 168
render_nW = 168
render_jitter_rays = True
render_poses = uniform
render_theta_range = [-180, 180]
render_phi_range = [-90, 0]
render_radius_range = [3.5, 4.5]

## Consistency loss options
consistency_loss = consistent_with_target_rep
consistency_loss_lam = 0.1
consistency_loss_lam0 = 0.1
consistency_model_type = clip_vit
consistency_size = 224
consistency_loss_comparison = cosine_sim

## PatchGAN/BiCycleGAN discriminator options
patch_gan_loss = True
patch_gan_mode = wgangp
patch_gan_G_lam = 0.1
patch_gan_num_Ds = 2
patch_gan_netD = basic_128_multi
patch_gan_D_inner_steps = 1
patch_gan_D_grad_clip = 20
patch_gan_D_min_loss_real = 0.1
patch_gan_D_min_loss_fake = 0.1
patch_gan_G_min_loss = 0.05
patch_gan_D_size = 168